Import-Module "D:\Dell Storage Powershell\DellStorage.ApiCommandSet.psd1"
$report='<h1>Compellent Daily Capacity Report</h1>'
$filename='C:\Users\samxiang_admin\cmlcapacity.csv'
$nasfilename='C:\Users\samxiang_admin\nascapacity.csv'
$conn="DSMDC"
echo "Storage,NASUsed(TB),NASAlloc(TB),Used(%)">$nasfilename
foreach ( $sc in Get-DellStorageCenter -ConnectionName $conn |Sort-Object Name){
    $scname=$sc.Name
    $total=Get-DellStorageCenterStorageUsage -ConnectionName $conn -Instance $sc.InstanceId
    Get-DellScVolumeFolder -ScName $sc.Name -ConnectionName $conn|where-Object { $_.FolderPath -eq 'FlulidFS/' -or $_.FolderPath -eq 'FluidFS/' }|foreach {
         $space=Get-DellScVolumeFolderStorageusage -Instance $_.InstanceId -ConnectionName $conn
         $util=($space.ActiveSpace.ByteSize/$space.ConfiguredSpace.ByteSize)*100
         $sc.Name,[int32]($space.ActiveSpace.ByteSize/1tb),[int32]($space.ConfiguredSpace.ByteSize/1tb),[int16]$util -join ',' |Out-File  -FilePath  $nasfilename -Append
    }
    echo "PoolType,Tier,Raid,Allocated(TB),Free(TB),Usage">$filename
    foreach ($st in Get-DellScStorageType -ConnectionName $conn -ScName $scname)
    {
        $pool=$st.Name.split('-')
        $tierlist=Get-DellScStorageTypeTier -ScName $scname -ConnectionName $conn -StorageType $st|Sort-Object DiskTier
         foreach ($tier in $tierlist)
        {
            $oldraid='raid0'
            $allocated=0
            $free=0
            $tierspace=Get-DellScStorageTypeTierStorageUsage -Instance $Tier.InstanceId -ConnectionName $conn
            $unalloc=[int32]($tierspace.NonAllocatedSpace.ByteSize/1TB)
            $tiername=$tier.DiskTier.Name
            
            Get-DellScStorageTypeClass -ConnectionName $conn -ScName $scname -StorageTypeTier $tier|Sort-Object -Descending RaidLevel|ForEach-Object{
                $space=Get-DellScStorageTypeClassStorageUsage -Instance $_.InstanceId -ConnectionName $conn
                if ($_.RaidLevel.Name -eq $oldraid)
                {
                    $allocated+=[int32]($space.AllocatedSpace.ByteSize/1tb)
                    $free+=[int32]($space.FreeSpace.ByteSize/1tb)
                }else
                {
                    if ($oldraid -ne "raid0" -and $allocated -gt 0)
                    {
                        $level=[int16](($unalloc+$free)*100/$allocated)
                        if ($level -lt 10 )
                        {
                            $level='Warning'
                        }else
                        {
                            $level='Normal'
                        }
                        if ( $unalloc -gt 0)
                        {
                            $freeout=$free.ToString()+'(+'+$unalloc.ToString()+')'
                        }else
                        {
                            $freeout=$free.ToString()
                        }
                        $pool[2],$tiername,$oldraid,$allocated,$freeout,$level -join ',' |Out-File  -FilePath  $filename -Append
                    }
                    $allocated=[int32]($space.AllocatedSpace.ByteSize/1tb)
                    $free=[int32]($space.FreeSpace.ByteSize/1tb)
                    $oldraid=$_.RaidLevel.Name
                 }
            }
            if ($allocated -gt 0)
            {
                $level=[int16](($unalloc+$free)*100/$allocated)
                if ($level -lt 10 )
                {
                    $level='Warning'
                }else
                {
                    $level='Normal'
                }
                if ( $unalloc -gt 0)
                {
                    $freeout=$free.ToString()+'(+'+$unalloc.ToString()+')'
                }else
                {
                    $freeout=$free.ToString()
                }
                $pool[2],$tiername,$oldraid,$allocated,$freeout,$level -join ',' |Out-File  -FilePath  $filename -Append
            }
         }
    }
    $util=[int16](($total.UsedSpace.ByteSize/$total.AvailableSpace.ByteSize)*100)
    $post="Total Usage: $util% of "+[String]($total.AvailableSpace)
    $report+=import-csv $filename|ConvertTo-HTML -AS Table -Fragment -PreContent "<h2>$scname</h2>" -PostContent $post|Out-String
}
$Style = "
<style>
    TABLE{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}
    TH{border-width: 1px;padding: 3px;border-style: solid;border-color: black;background-color:#778899}
    TD{border-width: 1px;padding: 3px;border-style: solid;border-color: black;}
</style>
"
$StatusColor = @{Warning = ' bgcolor="RED">Warning<';Normal = ' bgcolor="Green">Normal<';}
$StatusColor.Keys | foreach { $report = $report -replace ">$_<",($StatusColor.$_) }
$post='Generated by '+[string](Get-Date -Format F)
$Body=Import-CSV $nasfilename|ConvertTo-HTML -head $Style -PreContent '<h2>NAS Pool Usage</h2>' -Body $report -PostContent $post|Out-String
send-mailmessage -from "EnterpriseManager@sydney.edu.au" -to "ict-san-alerts@sydney.edu.au" -Cc "jeff.taggart@sydney.edu.au","ict-san-reports@sydney.edu.au" -subject "Compellent Daily Capacity Report" `
        -smtpServer smtp.usyd.edu.au -Body $Body -BodyAsHtml

